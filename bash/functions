#!/usr/bin/env bash

# Pick the right tool based on where this commmand is run
# -d Always use mv
function smart-mv {
    if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo 'Using git mv for moving files...'
        git mv "$@"
    else
        mv "$@"
    fi
}

# File only files
function ff {
    if [ $# -ne 2 ]; then
        echo "Usage: ff <path> <pattern>"
        exit 1;
    fi
    find $1 -type f -name $2
}

# Arch has a bug for i7559, where my touchpad
# stops working after a wake-up from sleep
# This is a work-around: Turn it off, then on again.
function fixtouch {
    gsettings set org.gnome.desktop.peripherals.touchpad send-events disabled;
    gsettings set org.gnome.desktop.peripherals.touchpad send-events enabled;
}

function glvpn-connect {
    # -u <username>
    # -b Continue in background after startup
    sudo openconnect -u vyenaman -b vpn.ufl.edu
}

function glvpn-disconnect {
    # Ensure that a openconnect process is running
    local oc_pid=$(pidof openconnect)
    if [ -z $oc_pid ]; then
        echo No process called \"openconnect\" found running \(via pidof\)
    else
        echo Found
        ps -p$oc_pid
        sudo kill -9 --verbose $oc_pid
    fi
}

# Connect to the GatorLink VPN using OpenConnect
function glvpn {
    # $1 is either '(c)' or '(dc)'
    if [ $1 == "c" ]; then
        glvpn-connect
    elif [ $1 == "dc" ]; then
        glvpn-disconnect
    fi
}


# Compres a folder to tar.gz with progress
function archive {
    tar cf - $1/ -P --exclude .git --exclude "*.log" | pv -s $(du -sb $1/ | awk '{print $1}') | gzip > $1.tgz
}

# Extract any compressed file format
function extract {
	if [ -z "$1" ]; then
		# display usage if no parameters given
		echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
		echo "		 extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
		return 1
	 else
		for n in $@
		do
		  if [ -f "$n" ] ; then
			  case "${n%,}" in
				*.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
							 tar xvf "$n"		;;
				*.lzma)		 unlzma ./"$n"		;;
				*.bz2)		 bunzip2 ./"$n"		;;
				*.rar)		 unrar x -ad ./"$n" ;;
				*.gz)		 gunzip ./"$n"		;;
				*.zip)		 unzip ./"$n"		;;
				*.z)		 uncompress ./"$n"	;;
				*.7z|*.arj|*.cab|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.rpm|*.udf|*.wim|*.xar)
							 7z x ./"$n"		;;
				*.xz)		 unxz ./"$n"		;;
				*.exe)		 cabextract ./"$n"	;;
				*)
							 echo "extract: '$n' - unknown archive method"
							 return 1
							 ;;
			  esac
		  else
			  echo "'$n' - file does not exist"
			  return 1
		  fi
		done
	fi
}

# Toggle to a shorter PS1 when I don't need the fullprompt
function toggle-prompt {
    if  [ -z ${ALT_PS1+x} ]; then
        echo Initializing ALT_PS1
        export ALT_PS1="λ "
    fi
    temp=$PS1
    export PS1=$ALT_PS1
    export ALT_PS1=$temp
}

# Create a new directory and enter it
function mkd {
	mkdir -p "$@" && cd "$_";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz {
	local tmpFile="${@%/}.tar";
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

	size=$(
		stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
	);

	local cmd="";
	if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli";
	else
		if hash pigz 2> /dev/null; then
			cmd="pigz";
		else
			cmd="gzip";
		fi;
	fi;

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
	"${cmd}" -v "${tmpFile}" || return 1;
	[ -f "${tmpFile}" ] && rm "${tmpFile}";

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
	);

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Use Git’s colored diff when available
hash git &>/dev/null;
if [ $? -eq 0 ]; then
	function diff {
		git diff --no-index --color-words "$@";
	}
fi;

# Create a data URL from a file
function dataurl {
	local mimeType=$(file -b --mime-type "$1");
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8";
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Start an HTTP server from a directory, optionally specifying the port
function server {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver {
	local port="${1:-4000}";
	local ip=$(ipconfig getifaddr en1);
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}";
}

# Compare original and gzipped file size
function gz {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

# Run `dig` and display the most useful info
function digga {
	dig +nocmd "$1" any +multiline +noall +answer;
}

# UTF-8-encode a string of Unicode symbols
function escape {
	printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u);
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode {
	perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Get a character’s Unicode code point
function codepoint {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified.";
		return 1;
	fi;

	local domain="${1}";
	echo "Testing ${domain}…";
	echo ""; # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
		| openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" \
			| openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version");
		echo "Common Name:";
		echo ""; # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
		echo ""; # newline
		echo "Subject Alternative Name(s):";
		echo ""; # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
			| sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
		return 0;
	else
		echo "ERROR: Certificate not found.";
		return 1;
	fi;
}

# `e` with no arguments opens the current directory in Emacs, otherwise
# opens the given location
function e {
	if [ $# -eq 0 ]; then
		emacs .;
	else
		emacs -nw "$@";
	fi;
}

# `nv` with no arguments opens the current directory in NeoVim, otherwise opens the
# given location
function nv {
	if [ $# -eq 0 ]; then
		nvim .;
	else
		nvim "$@";
	fi;
}
# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function colftree {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

